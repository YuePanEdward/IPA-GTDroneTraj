% Matlab codes for the automatic control of a Leica TS60 total station 

clear; clc;

% CONSTANTS

%%
%COM port number
COMPort = '/dev/ttyUSB0';  %on Linux
%COMPort = 'COM3';         %on Windows
%dB = 115200;
dB=9600;

%%
% PRSIM TYPE
% PRISM_ROUND = 0,
% PRISM_MINI = 1,
% PRISM_TAPE = 2,
% PRISM_360 = 3,     (used)
% PRISM_USER1 = 4,
% PRISM_USER2 = 5,
% PRISM_USER3 = 6,
% PRISM_360_MINI = 7, (used)
% PRISM_MINI_ZERO = 8,
% PRISM_USER = 9
% PRISM_NDS_TAPE = 10
prism_type = 3; 
%%
% REFLECTOR_TARGET = 0
% REFLECTORLESS_TARGET = 1
target_type = 0; 

%%
atr_state = 1; % ATR state on (1)

%%
% ANGLE MEASUREMENT TOLERANCE
% RANGE FROM 1[cc] ( =1.57079 E-06[ rad ], highest resolution, slowest) 
% TO 100[cc] ( =1.57079 E-04[ rad ], lowest resolution, fastest)
hz_tol = 1.57079e-04; % Horizontal tolerance (moderate resolution) 
v_tol = 1.57079e-04; % Vertical tolerance (moderate resolution)

%%
distmode = 2; % Default distance mode (from BAP_SetMeasPrg)

%%

% Open port, connect to TPS
TPSport = ConnectTPS(COMPort, dB);

%Configure TPS for measurements
setPropertiesTPS(TPSport, prism_type, target_type, atr_state, hz_tol, v_tol);


%%

% get current time
begin_time_str = datestr(now,'yyyymmddHHMMSS');

% track the prism
track_status = trackPrism(TPSport);

% figure for listening the keyboard event
figure(1);
title('Enter E on the keyboard to terminate the tracking');
plot3(0,0,0,'o','MarkerEdgeColor','k','MarkerFaceColor','k','MarkerSize',15);
hold on;
grid on;
xlabel('X(m)');
ylabel('Y(m)');
zlabel('Z(m)');
pause(1.0);

meas_polar=[];
meas_cart=[];
count = 0;
% keep take measurements (both in polar and cartesian coordinate systems)
while(1)
    count=count+1;
    fprintf('Measurement [%s]\n',num2str(count));
    begin_time_str = datestr(now,'HHMMSS');
    [D,Hr,V] = getMeasurements(TPSport, distmode);
    meas_polar = [meas_polar;[D,Hr,V]]; % in m, deg, deg
    [X,Y,Z]= polar2cart(D,Hr,V);
    meas_cart = [meas_cart; [X,Y,Z]]; % in m, m, m
    if strcmpi(get(gcf,'CurrentCharacter'),'e')
        break;
    end
    plot3(X,Y,Z,'--*r');
    %hold on;
    pause(0.1);
end


% save coordinates
save(['results' filesep 'meas_cart_' begin_time_str '.mat'],'meas_cart');
save(['results' filesep 'meas_polar_' begin_time_str '.mat'],'meas_polar');


% TODO LISTS:
% 1. increase the tracking frequency
% 2. add timestamp
% 3. add status (warning, accuracy...)


%%
%Measure the targets with TPS 
% if isfile('Points.mat')
%     load('Points.mat');
% else    
%     mat_Points = RequestPoints(TPSport, distmode);
%     save('Points', 'mat_Points');
% end
% 
% %Automatic measurements phase
% mat_meas  = takeMeasurements(TPSport, distmode, mat_Points);
% 
% %close connection
% fclose(TPSport);
% fprintf('\nTPS is disconnected\n\n');

%Statistical analysis


